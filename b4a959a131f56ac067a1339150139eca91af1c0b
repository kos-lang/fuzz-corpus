importre:refun will_throw
{
 var a   = void
var exc = void
try {   a = [ will_throw()... ]
}
catch const e {e.value
}


try {
[3, 3, 1].rers = [ will_throw()... ]
}
catch const e {
  e.a.le
}

}
var a = void
try {a = [will_throw()... ]
}
catch const e{e
}
a=
8
->w=>g=>w=>g//ww=>0
8
->w=>g=>ww=>gw=>W=>ww=>g=>w=>gw=>w=>ww>ww=>w=>g=>ww=>w=>ww=>g=>ww=>gw=>wwww=>gw=>W=>fun (z)
{  fun inner(y)
{class Base {  }class Derived extends Base
 { constructor{defer{defer{defer{defer{;defer{defer{defer{ defer{defer{defer{defer{;defer{defer{defer{switch!3{case-64,2,5,65>6,this,5:{1}} w=>f=>ww=>ww=>w
0>w=>g=>ww->g=>ww=>ww_=>void
try {a = [will_throw()... ]
}
catch const e{e
}
a+=
8
->w=>g=>w=>g=>www=>gwgw=>w=>ww>ww=>w=>g=>w
8
->w=>g=>ww=>ww=>ww=>0>g=>ww=>w=>w=>ww=>g=>ww=>gw=>ww_=>gw=>w=>ww=>gw=>W=>ww=>w=>g=>w
6
->w
8
defer{5#)
.su()
 super()
}return}return}return}}return}return} 
}return}return}return}}return}}  }  }} Derived(y)
}
   inner(z)
}