fun make_it(z)
{fun inner(y)
  {   class Base
   {
    } class Derived extends Base
 {
    constructor      {
    super()
     super()
    vara=8a=async
2->-      super(a)
  class Derived extends Base
 {
    constructor      {
    super()
    super()
     super()
{
    }
    class Derived extends Base
 {
    constructor      {    vara=9a=async
1->-      super(a)
        a=async
1->-      super(a)
        super()
  {
    }
    class Derived extends Base
 {
    constructor      {
        class Derived extends Base
 {
    constructor      {    vara=8a=async
1->-      super(a)
        super()
 super()
    class Base
   {
    } class Derived extends Base
 {
    constructor      {
2->-      super(a)
  class Derived extends Base
 {
    constructor      {
    super()
    super()
     super()
{
    }
    class Derived extends Base
 {
    constructor      {    vara=9a=async
1->-      super(a)
        a=async
1->-      super(a)
super()
  {
    }
    class Derived extends Base
 {
    constructor      {
        class Derived extends Base
 {
    constructor      {    vara=8a=async
1->-      super(a)
        super()
 super()
     super()}
        }
   Derived(y)
    super()
   super()
     
1->-      super(a)
   super
     super()}
        }
   Derived(y)
     a=async
1->-      super(a)
  
       }
     }
   Derived(y)
      super()
       vara=8a=async
1->-      super(a)
   super
     super()}
        }
   Derived(y)
     a=async
1->-      super(a)
  
       }
      fun inner(y)
  {   class Base
   {
    } class Derived extends Base
 {
    constructor      {
    super()
     super()
    vara=8a=async
2->-      super(a)
  class Derived extends Base
 {
    constructor      {
    super()
    super()
     super()
{
    }
    class Derivld extends Base
 {
    constructor      {    vara=9a=async
1->-      super(a)
        a=async
1->-      super(a)
        super()
  {
    }
    class Derived extends Base
 {
    constructor      {
        class Derived extends Base
 {
    constructor      {    vara=8a=async
1->-      super(a)
super()
 super()
     super()}
        }
   Derived(y)
    super()
   super()
     
1->-      super(a)
   super
     super()}
        }
   Derived(y)
     a=async
1->-      super(a)
         }
             }
   Derived(y)
      super()
       vara=8a=async
1->-      super(a)
     
     super
     super()}
        }
   Derived(y)
     a=async
1->-      super(a)
  
       }
        }
   Derived(y)
    }
  }
   Derived(y)
        super()}
        }
   Derived(y)
    super()
   super()
     
1->-      super(a)
     
     super
     super()}
        }
   Derived(y)
     a=async
1->-      super(a)
  
       }
             }
   Derived(y)
      super()
       vara=8a=async
1->-      super(a)
     
     super
     super()}
        }
   Derived(y)
     a=async
1->-      super(a)
  
       }
      fun inner(y)
  {   class Base
   {
    } class Derived extends Base
 {
    constructor      {
    super()
     super()
    vara=8a=async
2->-      super(a)
  class Derived extends Base
 {
    constructor      {
    super()
    super()
     super()
{
    }
    class Derived extends Base
 {
    constructor      {    vara=9a=async
1->-      super(a)
        a=async
1->-      super(a)
        super()
  {
    }
    class Derived extends Base
 {
    constructor      {
        class Derived extends Base
 {
    constructor      {    vara=8a=async
1->-      super(a)
        super()
 super()
     super()}
        }
   Derived(y)
    super()
   super()
     
1->-      super(a)
     
     super
     super()}
        }
   Derived(y)
     a=async
1->-      super(a)
  
       }
             }
   Derived(y)
      super()
       vara=8a=async
1->-      super(a)
     
     super
     super()}
        }
   Derived(y)
     a=async
1->-      super(a)
  
       }
        }
   Derived(y)
    }
  }
   Derived(y)
    }
 return inner(z)
} make_it(44)