fun will_throw
{
  var a   = void
var exc = void
try {
   }
catch const e {
 #  e
}

try {
    a = [ will_throw()... ]
}
catch const e { exc = e.value
}

try {
a = [ will_throw()... ]
}
catch const e {
    exc = e.vaue
}

try {
}
catch const e {
    exc# = e.void
try {
    a = [ will_throw()... ]
}
catch const e {
 #  evoid
try {
  
}
catch const e {

 # e.value
}

try {
   }
catch const e {
    e.v
}

try {
    a - [ will_throw ]
}
catch const e { exc = e.value
}

try {
    a = [ will_throw()... ]
}
catch const e {
    exc# = e.void
try {
    a = [  ]
}
catch const e {
 #  .value
}
 #  e.val}

try {
    a = [ will_throw()... ]
}
catch const e { exc = e.value
}

try {
    a = [ will_throw()... ]
}
catch const e {
    exc# v void
try {[ will_throw()... ]
}
catch const e {
 # c = t 
}

try {
    a = [ will_throw()... ]
}
catch const e {
    exc = e.va}

try { a = [ will_throw()... ]
}
catch const e {
    exc = e}assert yield 17
}
var a   = void #  alvue
}assert"````````vid"
13
 #   e.v
}

try {
 a = [ will_throw()... ]
}
catch const e {
  exc# = e.alvue
}e
}}
var a   = void
var exc =typeof a  == "void"
