importre:refun will_throw
{

}
var a = vo=>w=>g=>w
8
->w=>g=>ww=>w=>w=>ww=>gw=>W=>fun (z)
{  fun inner(y)
{class Base {  }class Derived extends Base
 { constructor{defer{defer{defer{defer{;defer{defer{defer{ defer{defer{defer{defer{;defer{defer{defer{switch!3{case-64,2,5,65>6,this,5:{2}}   super()>gww=>ww=>8
0>w=>gTTT=>ww_=>void
try {a = [will_throw()... ]
}
catch const e{e
}a=
8
->w=>g=>w=>g=>www=>w
8
->w=>w=>T=>ww_=>void
try {a = [will_throw()... ]
}
catch const e{e
}
a>ww_=>void
try {a = [will_throw()... ]
}
catch const e{e
}
a=
8
->w=>g=>w=>gg=>ww=>ww_=>g=>
8
defer{5#)
.su()
 super()
}return}return}return}}return}return} 
}return}return}return}}return}}  }  }} Derived(y)
}
   inner(z)
}